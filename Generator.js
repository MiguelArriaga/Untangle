function generateGrid_Basic(N) {
  all_dots = new Objects();
  all_lines = new Objects();
  
  
  // Generate Dots
  let x = 0;
  let y = 0;
  // for (let i = 0; i < N; i++) {
  //   x = width * random(0.1, 0.9);
  //   y = height * random(0.1, 0.9);
  //   let d = new MyDot(x, y);
  //   all_dots.list.push(d);
  // }

  N = 5;
  all_dots.list.push(new MyDot(10, 10));
  all_dots.list.push(new MyDot(width - 10, 10));
  all_dots.list.push(new MyDot(width / 2, height / 2));
  all_dots.list.push(new MyDot(width - 10, height - 10));
  all_dots.list.push(new MyDot(10, height - 10));


  // Generate Lines
  for (let i = 0; i < N - 1; i++) {
    let li = new MyLine(i, i + 1);
    all_lines.list.push(li);
  }
  all_lines.list.push(new MyLine(N - 1, 0));



}


function generateGrid(N,shuffle_points = false) {
  all_dots = new Objects();
  all_lines = new Objects();

  // Number of Random Lines to generate the dots
  let numRectas = ceil(0.5 + 0.5 * sqrt(N * 8 + 1));


  // Properties of the Random Lines
  let m = []; //numRectas
  let b = []; //numRectas
  // All nodes generated by Random Lines
  let nodes = []; // Will be 2D (r1,r2)

  // Generate Random Lines
  m.push(randm());
  b.push(2.0 * random(0.0, 1.0));
  for (let i = 1; i < numRectas; i++) {
    let newm = randm();
    while (m.includes(newm)) {
      newm = randm();
    }
    m.push(newm);
    b.push(2.0 * random(0.0, 1.0));
  }

  // console.log("m",m)
  // console.log("b",b)

  // Define Nodes
  let nodeCount = 0;
  let x_Coord = [];
  let y_Coord = [];

  for (let i = 0; i < numRectas; i++) {
    nodes[i] = []
    for (let j = i + 1; j < numRectas; j++) {
      let xval = (b[j] - b[i]) / (m[i] - m[j]);
      let yval = m[i] * xval + b[i];
      x_Coord.push(xval);
      y_Coord.push(yval);
      nodes[i][j] = nodeCount;
      nodeCount++;
    }
    for (let j = 0; j < i; j++) {
      nodes[i][j] = nodes[j][i];
    }
    nodes[i][i] = -1;
  }

  // console.log("nodes",nodes)
  // console.log("x_Coord",x_Coord)
  // console.log("y_Coord",y_Coord)


  // Define Connections
  let conn_from = [];
  let conn_to = [];
  for (let i = 0; i < numRectas; i++) {
    let line_nodes = []; //numRectas - 1
    let x_line_nodes = []; //numRectas - 1

    // Get nodes and x values
    for (let j = 0; j < numRectas; j++) {
      let node = nodes[i][j];
      if (node != -1) {
        line_nodes.push(node);
        x_line_nodes.push(x_Coord[node]);
      }
    }
    // console.log("x_line",x_line_nodes)

    // Sort order by x value
    let node_order = getSortingIndexes(x_line_nodes);
    // console.log("node_order",node_order)

    // Define connections
    for (let j = 0; j < numRectas - 2; j++) {
      conn_from.push(line_nodes[node_order[j]]);
      conn_to.push(line_nodes[node_order[j + 1]]);
    }
  }
  // console.log("conn_from",conn_from)
  // console.log("conn_to", conn_to)


  NDots = nodeCount;

  if (shuffle_points) {
    // Generate the dots in random position
    for (let i = 0; i < NDots; i++) {
      let x = width * random(0.1, 0.9);
      let y = height * random(0.1, 0.9);
      let d = new MyDot(x, y);
      all_dots.list.push(d);
    }
  } else {
    // Generate the dots in calculated position
    minX = min(x_Coord)
    maxX = max(x_Coord)
    minY = min(y_Coord)
    maxY = max(y_Coord)
    for (let i = 0; i < NDots; i++) {
      let x = map(x_Coord[i], minX, maxX, 0.1 * width, 0.9 * width)
      let y = map(y_Coord[i], minY, maxY, 0.1 * height, 0.9 * height)
      let d = new MyDot(x, y);
      all_dots.list.push(d);
    }
  }



  // Generate Lines
  NLines = conn_from.length;
  for (let i = 0; i < NLines; i++) {
    let li = new MyLine(conn_from[i], conn_to[i]);
    all_lines.list.push(li);
  }





}

// Get a random slope
function randm() {
  return tan(random(0.001, HALF_PI - 0.001));
}

// Get idexes of sorted array
function getSortingIndexes(theArray) {
  let tempArray = []
  for (var i = 0; i < theArray.length; i++) {
    tempArray.push([theArray[i], i]);
  }
  tempArray.sort(function(left, right) {
    return left[0] < right[0] ? -1 : 1;
  });
  let sortIndices = [];
  for (var j = 0; j < tempArray.length; j++) {
    sortIndices.push(tempArray[j][1]);
  }
  return sortIndices;
}